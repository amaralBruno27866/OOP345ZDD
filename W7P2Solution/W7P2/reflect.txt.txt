/*/////////////////////////////////////////////////////////////////////////
				  Workshop - #6 P2
Full Name  : Bruno Amaral
Student ID#: 143766228
Email      : bamaral2@myseneca.ca
Section    : ZDD

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
/////////////////////////////////////////////////////////////////////////*/

In this workshop we had to go deeper into the STL libraries, applying resources that we learned in this week 9 of the course, the algorithms had to offer more efficient treatment to the data read in the 'baked_good.txt' file.

I had some problems with displaying the data because the order was very different from what was requested, I later discovered that it was a problem that occurred more in Windows than in Linux, which I found very strange and this will require more study time to understand .

>>> STL functions used:
  => sort();
  This function proved to be more flexible and allowed ordering by different parameters. It proved to be better than loops as it is an optimized algorithm, which guarantees better performance.

  => accumulate();
  I used this function to simplify the accumulation that should be generated for an adequate sum result, this way the code was cleaner and easier to understand.

  => copy_if();
  This function is really useful, as it facilitates a copy based on some specific condition, it is much more efficient and makes the programmer's work easier since he understands how the business rule for this function works.

  => any_of();
  With this function, the verification work became much more practical as it automated the process more efficiently than a complex loop that could generate failures.

  => back_insert();
  Using this function together with 'copy_if' made it more efficient to insert elements from a container to fill the 'out_of_stock' list.

>>> Advantages of STL Algorithms:
  In my opinion, the biggest advantage of using these types of algorithms is their property of abstracting complex operations and making them more readable, efficient, practical, this greatly reduces the possibility of errors with memory allocation for example, apart from the fact that this optimizes the performance of written code.

>>> Impact of collection choice on 'sortBakery' implementation:
  The fact of choosing a list instead of a vector impacts the way we implement the algorithms, develop the functionalities and how we classify them. In the case of choosing to use a list, it implies having an algorithm that organizes the code since the list does not have anything that performs random access, this just shows the importance of correctly understanding the properties of each type of container before making the choice for one or the other.

>>> Conclusion:
  Although this workshop was smaller than the others so far, we made extensive use of concepts from the STL library, containers, clean code and much more.
